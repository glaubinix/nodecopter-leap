// Generated by CoffeeScript 1.6.3
(function() {
  var Drone, _;

  _ = require('underscore');

  Drone = (function() {
    function Drone(eventemitter, client) {
      this.eventemitter = eventemitter;
      this.client = client;
      this.client.up = _.throttle(this.client.up, 10);
      this.client.down = _.throttle(this.client.down, 10);
      this.client.on('navdata', console.log);
    }

    Drone.prototype.start = function() {
      this.registerTakeoffAndLanding();
      return this.registerMoves();
    };

    Drone.prototype.registerTakeoffAndLanding = function() {
      var _this = this;
      this.eventemitter.on('takeoff', function() {
        return _this.client.takeoff(function() {
          _this.client.up(1);
          return setTimeout(function() {
            _this.client.stop();
            return _this.eventemitter.emit('inflight');
          }, 2);
        });
      });
      return this.eventemitter.on('land', function() {
        return _this.client.land(function() {
          return _this.eventemitter.emit('ready');
        });
      });
    };

    Drone.prototype.registerMoves = function() {
      var _this = this;
      this.eventemitter.on('up', function(speed) {
        return _this.client.up(_this.sanatizeSpeed(speed));
      });
      this.eventemitter.on('down', function(speed) {
        return _this.client.down(_this.sanatizeSpeed(speed));
      });
      this.eventemitter.on('left', function(speed) {
        return _this.client.left(speed);
      });
      this.eventemitter.on('right', function(speed) {
        return _this.client.right(speed);
      });
      this.eventemitter.on('forward', function(speed) {
        return _this.client.front(speed);
      });
      this.eventemitter.on('backward', function(speed) {
        return _this.client.back(speed);
      });
      return this.eventemitter.on('stop', function() {
        return _this.client.stop();
      });
    };

    Drone.prototype.sanatizeSpeed = function(speed) {
      return Math.min(speed / 400, 1);
    };

    Drone.prototype.land = function() {
      var _this = this;
      return this.client.land(function() {
        return _this.eventemitter.emit('ready');
      });
    };

    return Drone;

  })();

  module.exports = Drone;

}).call(this);
