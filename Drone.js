// Generated by CoffeeScript 1.6.3
(function() {
  var Drone, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore');

  Drone = (function() {
    var drone_alt, state;

    state = 'landed';

    drone_alt = 0;

    function Drone(eventemitter, client) {
      this.eventemitter = eventemitter;
      this.client = client;
      this.calculate_drone_speed = __bind(this.calculate_drone_speed, this);
      this.updateState = __bind(this.updateState, this);
      this.client.on('navdata', function(data) {
        if (data.demo.batteryPercentage < 20) {
          console.warn("WARNING: BATTERY " + data.demo.batteryPercentage + " CHARGED!");
        }
        if (state !== 'inflight') {
          return;
        }
        return drone_alt = data.demo.altitude * 1000;
      });
    }

    Drone.prototype.start = function() {
      this.registerTakeoffAndLanding();
      return this.registerMoves();
    };

    Drone.prototype.registerTakeoffAndLanding = function() {
      var _this = this;
      this.eventemitter.on('takeoff', function() {
        _this.updateState('starting');
        return _this.client.takeoff(function() {
          return _this.updateState('inflight');
        });
      });
      return this.eventemitter.on('land', function() {
        _this.updateState('landing');
        return _this.client.land(function() {
          return _this.updateState('landed');
        });
      });
    };

    Drone.prototype.registerMoves = function() {
      /*
      @eventemitter.on 'left', (speed) => @sendCommand 'left', speed
      @eventemitter.on 'right', (speed) => @sendCommand 'right', speed
      @eventemitter.on 'forward', (speed) => @sendCommand 'front', speed
      @eventemitter.on 'backward', (speed) => @sendCommand 'back', speed
      */

      var _this = this;
      this.eventemitter.on('left', function(speed) {
        return _this.client.left(speed);
      });
      this.eventemitter.on('right', function(speed) {
        return _this.client.right(speed);
      });
      this.eventemitter.on('forward', function(speed) {
        return _this.client.front(speed);
      });
      this.eventemitter.on('backward', function(speed) {
        return _this.client.back(speed);
      });
      return this.eventemitter.on('altitude', function(alt) {});
    };

    Drone.prototype.sendCommand = function(cmd, arg) {
      console.log('this should never happen');
      if (state !== 'inflight') {
        return;
      }
      console.log(cmd, arg);
      return this.client[cmd](arg);
    };

    Drone.prototype.updateState = function(new_state) {
      state = new_state;
      return this.eventemitter.emit('state', state);
    };

    Drone.prototype.calculate_drone_speed = function(drone_perc_alt, hand_perc_alt) {};

    return Drone;

  })();

  module.exports = Drone;

}).call(this);
